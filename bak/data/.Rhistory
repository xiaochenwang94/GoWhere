z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar",norf"")
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
my_vector
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
bye()
swirl()
0
search()
source("http://bioconductor.org/biocLite.R")
biocLite()
add2 <- functino(x,y){
x+y
}
add2 <- functino(x,y){
x+y
}
add2 <- function(x,y){
x+y
}
add2(1,2)
above10 <- function(x){
use <- x > 10
x[use]
}
above10(1:10)
above <- function(x, n){
use <- x > n
x[use]
}
above(1:10,5)
above10(1:10)
above(1:10,5)
above <- function(x, n=10){
use <- x > n
x[use]
}
above(1:20)
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & (TRUE,FALSE,FALSE)
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
?sample
sample(20)
ints>5
which(ints>7)
any(ints<10)
any(ints<0)
all(ints>10)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4,divisor = 2)
args(remainder)
submit()
submit()
submit()
submit()
submit()
evaluate(std,c1.4, 3.6, 7.9, 8.8())
evaluate(std,c1.4, 3.6, 7.9, 8.8)
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram(23333)
submit()
submit()
mad_libs(2333,dfa,adfdf)
mad_libs(2333,"dfa","adfdf")
submit()
submit()
"I" p "love" p "R"
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
d1<-Sys.Date()
d1
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(t2)
t2<-as.POSIXlt(t1)
t2<-as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t1)
quarters(t2)
t3<-strptime("October 17, 1986 08:24",)
?strptime
t3<-strptime("October 17, 1986 08:24","%y-%m-%d")
t3<-strptime("October 17, 1986 08:24")
t3<-strptime("October 17, 1986 08:24","%y-%m-%d")
t3
t3<-strptime("October 17, 1986 08:24","%y-%m-%d %H:%M:%S")
t2
t3
bye()
swirl()
?
d
info()
skip()
strptime(t3,"%B %d, %Y %H %M")
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
t3
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units = 'days')
install_from_swirl("Getting and Cleaning Data")
0
library("mlbench", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:mlbench", unload=TRUE)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
flag_shapes
lapply(flag_shapes,range)
?sapply
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(x) x[2])
0
bye()
swirl()
bye()
swirl()
Sys.Date()
a<-Sys.Date()
a
unclass(a)
?date
b<-as.Date("2016-10-16")
b
unclass(b)
a-b
install.packages("xlsx")
install.packages("XML")
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
swirl()
install.packages("jsonlite")
library(jsonlite)
iris
dj<-toJSON(iris,pretty = T)
dj
cat(dj)
d<-fromJSON(dj)
d
head(d)
install.packages("data.table")
install.packages("RMySQL")
library(RMySQL)
hellodb<-dbConnect(MySQL(),user="root",host="localhost")
?dbConnect
hellodb<-dbConnect(MySQL(),user="root",host="localhost",password="123456")
result<-dbGetQuery(hellodb,"show databases;");
result
dbDisconnect(hellodb)
helloTone<-dbConnect(MySQL(),user="root",db="HelloTone",host="localhost",password="123456")
allTables<-dbListTables(helloTone)
allTables
dbListFields(User)
dbListFields(helloTone,User)
dbListFields(helloTone,"User")
dbGetQuery(helloTone,"select * from User")
a<-date('2016-12-19')
?date
as.Date("2016-12-19")
a<-as.Date("2016-12-19")
b<-as.Date("2016-10-17")
a-b
library("xlsx", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
？xlsx
?xlsx
?MRF
??MRF
plot(density(rep(0,1000)))
?rep
rep(0,1000)
?density
set.seed(10)
dat<-c(rgamma(300,shape=2,scale=2),rgamma(100,shape=10,scale=2))
plot(density(dat))
dfn<-function(x,a,alpha1,alpha2,theta){
a*dgamma(x,shape=alpha1,scale=theta)+(1-a)*dgamma(x,shape=alpha2,scale=theta)}
pfn<-function(x,a,alpha1,alpha2,theta){
a*pgamma(x,shape=alpha1,scale=theta)+(1-a)*pgamma(x,shape=alpha2,scale=theta)}
curve(dfn(x,0.75,2,10,2),add=T,col="red")
dat<-c(rgamma(300,shape=2,scale=2),rgamma(100,shape=10,scale=2))
plot(density(dat),ylim=c(0,0.2))
dfn<-function(x,a,alpha1,alpha2,theta){
a*dgamma(x,shape=alpha1,scale=theta)+(1-a)*dgamma(x,shape=alpha2,scale=theta)}
pfn<-function(x,a,alpha1,alpha2,theta){
a*pgamma(x,shape=alpha1,scale=theta)+(1-a)*pgamma(x,shape=alpha2,scale=theta)}
curve(dfn(x,0.75,2,10,2),add=T,col="red")
dfn1<-function(x){
0.5*dnorm(x,3,1)+0.5*dnorm(x,-3,1)}
par(mfrow=c(2,2))
curve(dfn1(x),from=-6,to=6)
data<-c(rnorm(200,3,1),rnorm(200,-3,1))
plot(density(data,bw=8))
plot(density(data,bw=0.8))
plot(density(data,bw=0.08))
?gl
?tapply
log(-1)
mean(x)
traceback()
lm(y-x)
traceback()
debug(lm)
lm(y~x)
library(swirl)
swirl()
5+7
exit
?
1
x<-5+7
x
x-3
y<-x-3
y
z<-c(1.1,9,3.14)
>c
?c
z
c(z,555)
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 100)
(z * 2 + 1000)
info
info()
z*2+100
q
q()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class())
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?as.character
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flag[,11:17]
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
head(flag_shapes)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red)
tapply(flags$population,flags$red,summary)
tapply(flags$landmass,summary)
tapply(flags$population,flags$landmass,summay)
tapply(flags$population,flags$landmass,summary)
?oauth_app
?summaryRprof
install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install_github("StatsWithR/statsr")
install.packages(praise)
install.packages("praise")
praise()
library(praise)
priase()
?praise
praise()
praise()
praise()
praise()
praise()
praise()
praise()
praise()
praise()
praise()
praise()
praise()
praise()
praise()
for(i in 1:10){
praise()
}
print(praise())
for(i in 1:10){
print(praise())
}
praise("${Exclamation}! This ${rpackage} is ${adjective}!")
praise("${EXCLAMATION}! You have done this ${adverb_manner}!")
install.packages("RDota")
library(RDota)
install.packages("Rwordseg")
install.packages("tm")
install.packages("wordcloud")
install.packages("Rwordseg")
install.packages("Rwordseg", repos = "http://R-Forge.R-project.org", type = "source")
library(Rwordseg)
installDict("DICTIONALY/huaqiangu_dictionary/花千骨词库大全.scel",dictname = "huaqiangu1")
installDict("DICTIONALY/huaqiangu_dictionary/仙侠奇缘之花千骨.scel",dictname = "huaqiangu2")
installDict("DICTIONALY/huaqiangu_dictionary/凡人修仙.scel",dictname = "huaqiangu3")
install.packages(xtable)
install.packages("xtable")
xt
library(datasets)
data(airquality)
fit <- lm(Ozone~Wind+Temp+Solar.R,data=airquality)
library(xtable)
xt <- xtable(summary(fit))
print(xt, type="html")
xt
summary(fit)
library(leaflet)
rand_lng = function(n = 10) rnorm(n, -93.65, .01)
rand_lat = function(n = 10) rnorm(n, 42.0285, .01)
m = leaflet() %>% addTiles() %>% addCircles(rand_lng(50), rand_lat(50), radius = runif(50, 10, 200))
m
install.packages(leaflet)
"leaflet"
install.packages("leaflet")
library(leaflet)
rand_lng = function(n = 10) rnorm(n, -93.65, .01)
rand_lat = function(n = 10) rnorm(n, 42.0285, .01)
m = leaflet() %>% addTiles() %>% addCircles(rand_lng(50), rand_lat(50), radius = runif(50, 10, 200))
m
install.packages("rJava")
install.packages("Rwordseg", repos = "http://R-Forge.R-project.org")
install.packages("Rwordseg", repos = "http://R-Forge.R-project.org")
install.packages("Rwordseg", repos = "http://R-Forge.R-project.org")
install.packages("Rwordseg", repos = "http://R-Forge.R-project.org")
View(data)
setwd("../data")
setwd("../")
pwd
getwd()
setwd("/Users/wxc575843/Desktop/code/GoWhere/data/")
data<-read.csv("full_text.csv",header = F)
view(data)
View(data)
data<-data[,1:6]
names(data)<-("userId","time","location","lati","long","tweets")
names(data)<-c("userId","time","location","lati","long","tweets")
data$lati[1]
data$lati[1]<50
out_data<-data[data$lati<42&data$lati>38,]
View(out_data)
View(out_data)
out_data<-data[data$lati<42&data$lati>38&data$long>-76&data$long<-72,]
out_data<-data[data$lati<42&data$lati>38&data$long>-76&data$long< -72,]
?write.csv
write.csv(out_data,"data_NewYork")
write.csv(out_data,"data_NewYork.csv")
